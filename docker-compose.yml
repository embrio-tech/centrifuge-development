version: '3'

volumes:
  subqlDb:
  blenderDb:

services:
  subql-installer:
    image: node:18-alpine
    profiles:
      - subql
    volumes:
      - ./centrifuge-subql:/app
    working_dir: /app
    command:
      - sh
      - -c
      - yarn codegen && yarn build
    depends_on:
      subql-proj:
        condition: service_completed_successfully

  subql-proj:
    image: mikefarah/yq
    profiles:
      - subql
    volumes:
      - ./centrifuge-subql:/app
    environment:
      ETH_NODE_API_KEY: ${ETH_NODE_API_KEY}
    working_dir: /app
    entrypoint: []
    command:
      - sh
      - -c
      - 'yq ". *=d load(\"chains-cfg/development-embrio.yaml\")" chains-cfg/base.yaml > project-centrifuge.yaml && yq ". *=d load(\"chains-evm/development-embrio.yaml\")" chains-evm/base.yaml > project-ethereum.yaml && ( echo "cat <<EOF" ; cat project-ethereum.yaml ; echo EOF ) | sh | tee project-ethereum.yaml'

  subql-db:
    build:
      context: ./centrifuge-subql/
      dockerfile: docker/pg-Dockerfile
    profiles:
      - subql
    ports:
      - 5432:5432
    volumes:
      - subqlDb:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${SUBQL_DB_USER}
      POSTGRES_PASSWORD: ${SUBQL_DB_PASS}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  subql-node-cfg:
    image: onfinality/subql-node:latest
    profiles:
      - subql
    depends_on:
      subql-db:
        condition: service_healthy
      subql-installer:
        condition: service_completed_successfully
      subql-proj:
        condition: service_completed_successfully
    restart: always
    environment:
      DB_USER: ${SUBQL_DB_USER}
      DB_PASS: ${SUBQL_DB_PASS}
      DB_DATABASE: postgres
      DB_HOST: subql-db
      DB_PORT: 5432
    volumes:
      - ./centrifuge-subql:/app
    command:
      - -f=/app/project-centrifuge.yaml
      - --multi-chain
      - --db-schema=app
      - --disable-historical=true
      - --batchSize=100
      #- --debug
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://subql-node-cfg:3000/ready']
      interval: 3s
      timeout: 5s
      retries: 10

  subql-node-eth:
    image: onfinality/subql-node-ethereum:latest
    profiles:
      - subql
    depends_on:
      subql-db:
        condition: service_healthy
      subql-installer:
        condition: service_completed_successfully
      subql-proj:
        condition: service_completed_successfully
    restart: always
    environment:
      DB_USER: ${SUBQL_DB_USER}
      DB_PASS: ${SUBQL_DB_PASS}
      DB_DATABASE: postgres
      DB_HOST: subql-db
      DB_PORT: 5432
    volumes:
      - ./centrifuge-subql:/app
    command:
      - -f=/app/project-ethereum.yaml
      - --multi-chain
      - --db-schema=app
      - --disable-historical=true
      - --workers=2
      - --batch-size=30
      #- --skipTransactions=true
      #- --debug
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://subql-node-eth:3000/ready']
      interval: 3s
      timeout: 5s
      retries: 10

  subql-query:
    image: onfinality/subql-query
    profiles:
      - subql
    ports:
      - 3000:3000
    depends_on:
      subql-db:
        condition: service_healthy
      subql-node-cfg:
        condition: service_healthy
      subql-installer:
        condition: service_completed_successfully
      subql-proj:
        condition: service_completed_successfully
    restart: always
    environment:
      DB_USER: ${SUBQL_DB_USER}
      DB_PASS: ${SUBQL_DB_PASS}
      DB_DATABASE: postgres
      DB_HOST: subql-db
      DB_PORT: 5432
    command:
      - --name=app
      - --playground
      - --indexer=http://subql-node:3000

  insights-client:
    image: centrifuge-insights
    profiles:
      - insights
    build:
      context: centrifuge-insights
      dockerfile: Dockerfile
      target: install
    volumes:
      - ./centrifuge-insights:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 8010:8010
    environment:
      # make hot-reloading work.
      - CHOKIDAR_USEPOLLING=true # maybe obsolete?
      - WDS_SOCKET_PORT=0
      # run node in development mode
      - NODE_ENV=development
      # set ops env to local
      - REACT_APP_OPS_ENV=local
      - PORT=8010
    command: yarn start

  blender-db:
    image: mongo
    profiles:
      - blender
    volumes:
      - blenderDb:/data/db
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${BLENDER_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${BLENDER_DB_PASS}
      MONGO_INITDB_DATABASE: blender

  blender-influx:
    image: centrifuge-influx
    profiles:
      - blender
    build:
      context: ./centrifuge-influx
      dockerfile: Dockerfile
      target: install
    volumes:
      - ./centrifuge-influx:/usr/src/app
      - /usr/src/app/node_modules
    ports: []
    #  - 9229:9229
    depends_on:
      - blender-db
    environment:
      DB_URI: 'mongodb://${BLENDER_DB_USER}:${BLENDER_DB_PASS}@blender-db:27017/blender?authSource=admin'
      POOL_ID: ${POOL_ID}
      PROXY_KEYRING_URI: ${PROXY_KEYRING_URI}
      OPERATOR_ADDRESS: ${OPERATOR_ADDRESS}
    tty: true # makes the service logs colorful
    command: yarn develop

  blender-outflux:
    image: centrifuge-outflux
    profiles:
      - blender
    build:
      context: ./centrifuge-outflux
      dockerfile: Dockerfile
      target: install
    volumes:
      - ./centrifuge-outflux:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 5010:5000
      - 9229:9229
    depends_on:
      - blender-db
    environment:
      DB_URI: 'mongodb://${BLENDER_DB_USER}:${BLENDER_DB_PASS}@blender-db:27017/blender?authSource=admin'
      LOGGER_LEVEL: debug
      API_KEY: supersecret
    tty: true # makes the service logs colorful
    command: yarn develop:debug
